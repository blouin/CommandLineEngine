<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CommandCanNotHaveSpace" xml:space="preserve">
    <value>Command with spaces in the names are not allowed. Command '{0}'.</value>
  </data>
  <data name="CommandDuplicate" xml:space="preserve">
    <value>Duplicate command named '{0}' found. Ensure that all methods with the [Command] attribute have unique names.</value>
  </data>
  <data name="CommandInformation" xml:space="preserve">
    <value>Command name is '{0}' and help switch is set to '{1}'.</value>
  </data>
  <data name="CommandInvalid" xml:space="preserve">
    <value>Command '{0}' has invalid parameters. Can not be executed.</value>
  </data>
  <data name="CommandReservedKeywords" xml:space="preserve">
    <value>Command with reserved keyword found. Reserved kewords are '{0}'.</value>
  </data>
  <data name="CommandValid" xml:space="preserve">
    <value>Command '{0}' is executable with specified parameters.</value>
  </data>
  <data name="CreatingDefaultInstance" xml:space="preserve">
    <value>Creating default instance of '{0}' using the constructor with no arguments.</value>
  </data>
  <data name="DevelopperException" xml:space="preserve">
    <value>Invalid developpement configuration. See OperationMessages property on this exception for details.</value>
  </data>
  <data name="ErrorExecutingCommand" xml:space="preserve">
    <value>Error executing command.</value>
  </data>
  <data name="ErrorValidatingCommand" xml:space="preserve">
    <value>Error validating arguments before executing.</value>
  </data>
  <data name="ExecutingCommand" xml:space="preserve">
    <value>Executing command '{0}'.</value>
  </data>
  <data name="ExecutingCommandFromArguments" xml:space="preserve">
    <value>Executing command '{0}' from arguments.</value>
  </data>
  <data name="GetFromArguments" xml:space="preserve">
    <value>Get command from arguments.</value>
  </data>
  <data name="Help_AvailableCommands" xml:space="preserve">
    <value>Available commands:</value>
  </data>
  <data name="Help_DefaultValue" xml:space="preserve">
    <value>Default value: {0}</value>
  </data>
  <data name="Help_ForCommand" xml:space="preserve">
    <value>Help for command '{0}'</value>
  </data>
  <data name="Help_HelpUrl" xml:space="preserve">
    <value>See: {0}</value>
  </data>
  <data name="Help_NoDescription" xml:space="preserve">
    <value>No description available.</value>
  </data>
  <data name="Help_Options" xml:space="preserve">
    <value>Options:</value>
  </data>
  <data name="Help_Parameters" xml:space="preserve">
    <value>Parameters:</value>
  </data>
  <data name="Help_Usage" xml:space="preserve">
    <value>Usage: {0} [commandName] [arguments (name=value)]</value>
  </data>
  <data name="Invalid" xml:space="preserve">
    <value>Invalid</value>
  </data>
  <data name="NoCommandFound" xml:space="preserve">
    <value>No commands found. Ensure that at least one method is marked with the [Command] attribute.</value>
  </data>
  <data name="ParameterCanNotHaveSpace" xml:space="preserve">
    <value>Parameter with spaces in the names are not allowed. Parameter '{0}' found for command '{1}'.</value>
  </data>
  <data name="ParameterDuplicate" xml:space="preserve">
    <value>Duplicate parameter named '{0}' found for command '{1}'. Ensure that all parameters with the [Parameter] attribute have unique names.</value>
  </data>
  <data name="ParameterMissing" xml:space="preserve">
    <value>Parameter '{0}' value missing.</value>
  </data>
  <data name="ParameterReservedKeywords" xml:space="preserve">
    <value>Parameter with reserved keyword found for command '{1}'. Reserved kewords are '{0}'.</value>
  </data>
  <data name="ParameterVisible" xml:space="preserve">
    <value>Hidden parameter named '{0}' found for command '{1}' does not have a default value specified. Ensure that all parameters with the [Hidden] attribute have default values.</value>
  </data>
  <data name="UnknownArgument" xml:space="preserve">
    <value>Unknown argument '{0}'.</value>
  </data>
  <data name="UnknownCommand" xml:space="preserve">
    <value>Unknown command name.</value>
  </data>
  <data name="UnknownCommandSingle" xml:space="preserve">
    <value>Unknown command name, but a single exists. Executing command '{0}'.</value>
  </data>
  <data name="Valid" xml:space="preserve">
    <value>Valid</value>
  </data>
  <data name="ValidatingCommand" xml:space="preserve">
    <value>Validating command '{0}'.</value>
  </data>
</root>